<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://fastpages.fast.ai/tutorials/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fastpages.fast.ai/tutorials/" rel="alternate" type="text/html" /><updated>2022-09-12T14:34:02-05:00</updated><id>https://fastpages.fast.ai/tutorials/feed.xml</id><title type="html">Stephen Lemasney</title><subtitle>Powered by [fastpages](https://fastpages.fast.ai/)</subtitle><entry><title type="html">Testing the match case statements</title><link href="https://fastpages.fast.ai/tutorials/2022/06/27/match-case.html" rel="alternate" type="text/html" title="Testing the match case statements" /><published>2022-06-27T00:00:00-05:00</published><updated>2022-06-27T00:00:00-05:00</updated><id>https://fastpages.fast.ai/tutorials/2022/06/27/match-case</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/2022/06/27/match-case.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-06-27-match-case.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this tutorial, we'll take a look at the new <code>match-case</code> statement released in Python 3.10.</p>
<p>We'll look at:</p>
<ol>
<li>What is the match-case statement?</li>
<li>What features does it have?</li>
<li>Why would you use match-case over an if-else statement?</li>
</ol>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="1.-What-is-the-match-case-statement?">1. What is the match-case statement?<a class="anchor-link" href="#1.-What-is-the-match-case-statement?"> </a></h2><p>On the surface it looks very simliar to an if-else statement. You provide some conditions, and the statement retuns a value if those conditions are met. For example, here we have a <code>match-case</code> to match the London TFL tube to that line's official colour.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">find_tube</span><span class="p">(</span><span class="n">tube_line_colour</span><span class="p">):</span>
    
    <span class="n">match</span> <span class="n">tube_line_colour</span><span class="p">:</span>
        <span class="n">case</span> <span class="s2">&quot;black&quot;</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&quot;northern&quot;</span>
        <span class="n">case</span> <span class="s2">&quot;red&quot;</span> <span class="o">|</span> <span class="s2">&quot;orange&quot;</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&quot;central&quot;</span>
        <span class="n">case</span> <span class="n">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&quot;unknown&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">find_tube</span><span class="p">(</span><span class="s2">&quot;red&quot;</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">find_tube</span><span class="p">(</span><span class="s2">&quot;darkgreen&quot;</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea ">
<pre>&#39;central&#39;</pre>
</div>

</div>

<div class="output_area">



<div class="output_text output_subarea ">
<pre>&#39;unknown&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We could also implement the same logic using an <code>if-else</code> statement:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">find_tube</span><span class="p">(</span><span class="n">tube_line_colour</span><span class="p">):</span>
    
    <span class="k">if</span> <span class="n">tube_line_colour</span> <span class="o">==</span> <span class="s2">&quot;black&quot;</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">&quot;northern&quot;</span>
    
    <span class="k">elif</span> <span class="n">tube_line_colour</span> <span class="o">==</span> <span class="s2">&quot;red&quot;</span> <span class="ow">or</span> <span class="n">tube_line_colour</span> <span class="o">==</span> <span class="s2">&quot;orange&quot;</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">&quot;central&quot;</span>
    
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s2">&quot;unknown&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">find_tube</span><span class="p">(</span><span class="s2">&quot;red&quot;</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">find_tube</span><span class="p">(</span><span class="s2">&quot;darkgreen&quot;</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea ">
<pre>&#39;central&#39;</pre>
</div>

</div>

<div class="output_area">



<div class="output_text output_subarea ">
<pre>&#39;unknown&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="2.-What-features-does-it-have?">2. What features does it have?<a class="anchor-link" href="#2.-What-features-does-it-have?"> </a></h2>
</div>
</div>
</div>
</div>]]></content><author><name>Stephen Lemasney</name></author><summary type="html"><![CDATA[TBC]]></summary></entry><entry><title type="html">An Example Markdown Post</title><link href="https://fastpages.fast.ai/tutorials/markdown/2020/01/14/test-markdown-post.html" rel="alternate" type="text/html" title="An Example Markdown Post" /><published>2020-01-14T00:00:00-06:00</published><updated>2020-01-14T00:00:00-06:00</updated><id>https://fastpages.fast.ai/tutorials/markdown/2020/01/14/test-markdown-post</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/markdown/2020/01/14/test-markdown-post.html"><![CDATA[<h1 id="example-markdown-post">Example Markdown Post</h1>

<h2 id="basic-setup">Basic setup</h2>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-filename.md</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">filename</code> is whatever file name you choose, to remind yourself what this post is about. <code class="language-plaintext highlighter-rouge">.md</code> is the file extension for markdown files.</p>

<p>The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “<em>level 1 heading</em>” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line <code class="language-plaintext highlighter-rouge">## File names</code> above.</p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>You can use <em>italics</em>, <strong>bold</strong>, <code class="language-plaintext highlighter-rouge">code font text</code>, and create <a href="https://www.markdownguide.org/cheat-sheet/">links</a>. Here’s a footnote <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Here’s a horizontal rule:</p>

<hr />

<h2 id="lists">Lists</h2>

<p>Here’s a list:</p>

<ul>
  <li>item 1</li>
  <li>item 2</li>
</ul>

<p>And a numbered list:</p>

<ol>
  <li>item 1</li>
  <li>item 2</li>
</ol>

<h2 id="boxes-and-stuff">Boxes and stuff</h2>

<blockquote>
  <p>This is a quotation</p>
</blockquote>

<div class="Toast Toast--warning googoo">
   <span class="Toast-icon"><svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z"></path></svg></span>
   <span class="Toast-content">You can include alert boxes</span>
</div>

<p>…and…</p>

<div class="Toast">
   <span class="Toast-icon"><svg class="octicon octicon-info" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z"></path></svg></span>
   <span class="Toast-content">You can include info boxes</span>
</div>

<h2 id="images">Images</h2>

<p><img src="tutorials/images/logo.png" alt="" title="fast.ai's logo" /></p>

<h2 id="code">Code</h2>

<p>You can format text and code per usual</p>

<p>General preformatted text:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Do a thing
do_thing()
</code></pre></div></div>

<p>Python code and output:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Prints '2'
</span><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div></div>

<p>Formatting text as shell commands:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"hello world"</span>
./some_script.sh <span class="nt">--option</span> <span class="s2">"value"</span>
wget https://example.com/cat_photo1.png
</code></pre></div></div>

<p>Formatting text as YAML:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">key</span><span class="pi">:</span> <span class="s">value</span>
<span class="pi">-</span> <span class="na">another_key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">another</span><span class="nv"> </span><span class="s">value"</span>
</code></pre></div></div>

<h2 id="tables">Tables</h2>

<table>
  <thead>
    <tr>
      <th>Column 1</th>
      <th>Column 2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A thing</td>
      <td>Another thing</td>
    </tr>
  </tbody>
</table>

<h2 id="tweetcards">Tweetcards</h2>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Altair 4.0 is released! <a href="https://t.co/PCyrIOTcvv">https://t.co/PCyrIOTcvv</a><br />Try it with:<br /><br />  pip install -U altair<br /><br />The full list of changes is at <a href="https://t.co/roXmzcsT58">https://t.co/roXmzcsT58</a> ...read on for some highlights. <a href="https://t.co/vWJ0ZveKbZ">pic.twitter.com/vWJ0ZveKbZ</a></p>&mdash; Jake VanderPlas (@jakevdp) <a href="https://twitter.com/jakevdp/status/1204765621767901185?ref_src=twsrc%5Etfw">December 11, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>This is the footnote. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[A minimal example of using markdown with fastpages.]]></summary></entry><entry><title type="html">Measuring Equity Risk</title><link href="https://fastpages.fast.ai/tutorials/2018/03/03/measure-equity-risk.html" rel="alternate" type="text/html" title="Measuring Equity Risk" /><published>2018-03-03T00:00:00-06:00</published><updated>2018-03-03T00:00:00-06:00</updated><id>https://fastpages.fast.ai/tutorials/2018/03/03/measure-equity-risk</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/2018/03/03/measure-equity-risk.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2018-03-03-measure-equity-risk.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this notebook we'll explore two statistical methods for calculating Equity Risk:</p>
<ol>
<li>Variance: fluctuation of stock return from its mean</li>
<li>VaR: the maximum an investor could loose (within a confidence interval)</li>
</ol>
<p>For the purposes of this notebook, we'll explore the above looking at the risk of Apple (ticker = AAPL).</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Import-packages-and-setup-configurations">Import packages and setup configurations<a class="anchor-link" href="#Import-packages-and-setup-configurations"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">quandl</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">linear_model</span>
<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s1">&#39;fivethirtyeight&#39;</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">statsmodels.formula.api</span> <span class="kn">import</span> <span class="n">ols</span>

<span class="c1"># Use Python&#39;s &quot;magic&quot; commands since we want to see the graphs within this notebook</span>
<span class="o">%</span><span class="k">matplotlib</span> inline
<span class="o">%</span><span class="k">pylab</span> inline
<span class="n">pylab</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s2">&quot;figure.figsize&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Populating the interactive namespace from numpy and matplotlib
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">directory</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;/data/&quot;</span> <span class="c1"># CSV file contained within local directory</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

</div>]]></content><author><name>Stephen Lemasney</name></author><summary type="html"><![CDATA[TBC]]></summary></entry><entry><title type="html">SVP100 - Hitting The Wall</title><link href="https://fastpages.fast.ai/tutorials/markdown/2018/03/02/svp.html" rel="alternate" type="text/html" title="SVP100 - Hitting The Wall" /><published>2018-03-02T00:00:00-06:00</published><updated>2018-03-02T00:00:00-06:00</updated><id>https://fastpages.fast.ai/tutorials/markdown/2018/03/02/svp</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/markdown/2018/03/02/svp.html"><![CDATA[<h1 id="svp100---hitting-the-wall">SVP100 - Hitting The Wall</h1>

<p>In August of 2017 I ran the SVP100. This is a 100KM trail running race starting in Newmarket (Suffolk, UK) and ending in Manning Tree (Essex, UK). In regular distance marathons, its widely believed runners “hit the wall” at around 30KM mark (or 70% through the race). In this notebook, I want to see if the same holds true over a 100KM distance.</p>

<p>From a high level, the code below performs the following:</p>

<ol>
  <li>
    <p>Scrape results data from the race website (using Beautiful Soup)</p>
  </li>
  <li>
    <p>Render scraped data into a DataFrame (using Pandas)</p>
  </li>
  <li>
    <p>Format (or wrangle) the data into formats we can work with</p>
  </li>
  <li>
    <p>Present results in time series graph (using Seaborn)</p>
  </li>
</ol>

<h2 id="1-import-packages-and-set-configurations">1. Import packages and set configurations</h2>

<p>First, let’s import some packages. We’ll use BeautifulSoup for web scraping, pandas for data analysis, and then seaborn for plotting.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import the packages we'll use for our analysis
</span><span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">requests</span>

<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<p>Then we set the plotting configuration. I really like the “fivethirtyeight” stylesheet which generates plots in the style used by fivethirtyeight.com.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use line magic function to enable matplotlib to work interactively with iPython
</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="o">%</span><span class="n">pylab</span> <span class="n">inline</span>

<span class="c1"># Set style to fivethirtyeight to create clean and clear looking graphs
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'fivethirtyeight'</span><span class="p">)</span>

<span class="c1"># Define a dictionary containing default plotting configurations
</span>
<span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">'legend.fontsize'</span><span class="p">:</span> <span class="s">'small'</span><span class="p">,</span>
          <span class="s">'figure.figsize'</span><span class="p">:</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mf">4.5</span><span class="p">),</span>
         <span class="s">'axes.labelsize'</span><span class="p">:</span> <span class="s">'small'</span><span class="p">,</span>
         <span class="s">'axes.titlesize'</span><span class="p">:</span><span class="s">'medium'</span><span class="p">,</span>
         <span class="s">'xtick.labelsize'</span><span class="p">:</span><span class="s">'small'</span><span class="p">,</span>
         <span class="s">'ytick.labelsize'</span><span class="p">:</span><span class="s">'small'</span><span class="p">}</span>

<span class="n">pylab</span><span class="p">.</span><span class="n">rcParams</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Populating the interactive namespace from numpy and matplotlib
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BASE_URL</span> <span class="o">=</span> <span class="s">"http://www.svp100.co.uk/results-"</span>
<span class="n">YEAR</span> <span class="o">=</span> <span class="mi">2017</span>
</code></pre></div></div>

<h2 id="2-generate-unformatted-table-of-race-data">2. Generate unformatted table of race data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">df_builder</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">BASE_URL</span><span class="p">,</span> <span class="n">year</span><span class="o">=</span><span class="n">YEAR</span><span class="p">):</span>
    
    <span class="s">"""
    This function returns a pandas DataFrame which contain data scraped from the race website.
    The data is unformatted.
    
    Attributes:
    -----------
    base_url: the url which contains race data in HTML
    year: the year for we would like data
    """</span>
    
    <span class="c1"># Scrape the data from the race website
</span>    <span class="n">url</span> <span class="o">=</span> <span class="n">base_url</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="n">text</span>
    <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="s">'lxml'</span><span class="p">)</span>
    
    <span class="c1"># Find tables from the html
</span>    <span class="n">rows</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'tr'</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span>
    
    <span class="c1"># Collect and format column names for the dataframe
</span>    <span class="n">column_html</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'th'</span><span class="p">)[:]</span>    
    <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">.</span><span class="n">contents</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">lower</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span><span class="s">""</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"_"</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">column_html</span> <span class="k">if</span> <span class="n">i</span><span class="p">.</span><span class="n">contents</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>

    <span class="c1"># Build a dataframe
</span>    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
        <span class="n">row</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'td'</span><span class="p">)</span>
        <span class="n">row_list</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">counter</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="n">row_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">counter</span><span class="p">].</span><span class="n">string</span><span class="p">)</span>
        <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">row_list</span><span class="p">)</span>
            
    <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">).</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"club"</span><span class="p">]).</span><span class="n">set_index</span><span class="p">(</span><span class="s">"position"</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unformatted_df</span> <span class="o">=</span> <span class="n">df_builder</span><span class="p">(</span><span class="n">BASE_URL</span><span class="p">,</span> <span class="n">YEAR</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unformatted_df</span><span class="p">.</span><span class="n">tail</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>bib</th>
      <th>mf</th>
      <th>start</th>
      <th>cp1</th>
      <th>cp2</th>
      <th>cp3</th>
      <th>cp4</th>
      <th>cp5</th>
      <th>cp6</th>
      <th>finish</th>
      <th>total_time</th>
    </tr>
    <tr>
      <th>position</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>91</th>
      <td>162</td>
      <td>Female</td>
      <td>07:00:00</td>
      <td>09:51:33</td>
      <td>DNF</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>92</th>
      <td>7</td>
      <td>Male</td>
      <td>08:30:00</td>
      <td>10:23:05</td>
      <td>DNF</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="3-clean-the-table-of-race-data">3. Clean the table of race data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dt_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">"start"</span><span class="p">,</span> <span class="s">"cp1"</span><span class="p">,</span> <span class="s">"cp2"</span><span class="p">,</span> <span class="s">"cp3"</span><span class="p">,</span> <span class="s">"cp4"</span><span class="p">,</span> <span class="s">"cp5"</span><span class="p">,</span> <span class="s">"cp6"</span><span class="p">,</span> <span class="s">"finish"</span><span class="p">,</span> <span class="s">"total_time"</span><span class="p">]</span>
<span class="n">unformatted_df</span> <span class="o">=</span> <span class="n">unformatted_df</span><span class="p">.</span><span class="n">dropna</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">dt_cols</span><span class="p">:</span>
    
    <span class="n">unformatted_df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">unformatted_df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="s">"2017-08-08 "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span>
        
    
    
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unformatted_df</span><span class="p">[</span><span class="s">"time2cp1"</span><span class="p">]</span> <span class="o">=</span> <span class="n">unformatted_df</span><span class="p">.</span><span class="n">cp1</span> <span class="o">-</span> <span class="n">unformatted_df</span><span class="p">.</span><span class="n">start</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unformatted_df</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>bib</th>
      <th>mf</th>
      <th>start</th>
      <th>cp1</th>
      <th>cp2</th>
      <th>cp3</th>
      <th>cp4</th>
      <th>cp5</th>
      <th>cp6</th>
      <th>finish</th>
      <th>total_time</th>
      <th>time2cp1</th>
    </tr>
    <tr>
      <th>position</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>19</td>
      <td>Male</td>
      <td>2017-08-08 08:30:00</td>
      <td>2017-08-08 09:58:30</td>
      <td>2017-08-08 11:26:51</td>
      <td>2017-08-08 12:58:00</td>
      <td>2017-08-08 14:34:00</td>
      <td>2017-08-08 15:41:00</td>
      <td>2017-08-08 17:04:49</td>
      <td>2017-08-08 17:54:10</td>
      <td>2017-08-08 09:24:10</td>
      <td>0 days 01:28:30</td>
    </tr>
    <tr>
      <th>2</th>
      <td>20</td>
      <td>Male</td>
      <td>2017-08-08 08:30:00</td>
      <td>2017-08-08 09:56:03</td>
      <td>2017-08-08 11:22:10</td>
      <td>2017-08-08 13:20:00</td>
      <td>2017-08-08 15:14:00</td>
      <td>2017-08-08 16:31:00</td>
      <td>2017-08-08 18:13:51</td>
      <td>2017-08-08 19:09:10</td>
      <td>2017-08-08 10:39:10</td>
      <td>0 days 01:26:03</td>
    </tr>
    <tr>
      <th>3</th>
      <td>13</td>
      <td>Female</td>
      <td>2017-08-08 08:30:00</td>
      <td>2017-08-08 10:14:44</td>
      <td>2017-08-08 12:01:06</td>
      <td>2017-08-08 13:50:00</td>
      <td>2017-08-08 15:42:00</td>
      <td>2017-08-08 16:56:00</td>
      <td>2017-08-08 18:33:49</td>
      <td>2017-08-08 19:30:55</td>
      <td>2017-08-08 11:00:55</td>
      <td>0 days 01:44:44</td>
    </tr>
    <tr>
      <th>4</th>
      <td>8</td>
      <td>Male</td>
      <td>2017-08-08 08:30:00</td>
      <td>2017-08-08 10:15:26</td>
      <td>2017-08-08 12:08:01</td>
      <td>2017-08-08 13:52:00</td>
      <td>2017-08-08 15:52:00</td>
      <td>2017-08-08 17:12:00</td>
      <td>2017-08-08 18:53:46</td>
      <td>2017-08-08 19:53:37</td>
      <td>2017-08-08 11:23:37</td>
      <td>0 days 01:45:26</td>
    </tr>
    <tr>
      <th>5</th>
      <td>143</td>
      <td>Male</td>
      <td>2017-08-08 07:00:00</td>
      <td>2017-08-08 08:49:35</td>
      <td>2017-08-08 10:44:27</td>
      <td>2017-08-08 12:33:00</td>
      <td>2017-08-08 14:41:00</td>
      <td>2017-08-08 16:02:00</td>
      <td>2017-08-08 17:40:23</td>
      <td>2017-08-08 18:36:58</td>
      <td>2017-08-08 11:36:58</td>
      <td>0 days 01:49:35</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>63</th>
      <td>186</td>
      <td>Female</td>
      <td>2017-08-08 07:00:00</td>
      <td>2017-08-08 09:15:33</td>
      <td>2017-08-08 11:53:05</td>
      <td>2017-08-08 14:17:00</td>
      <td>2017-08-08 17:03:00</td>
      <td>2017-08-08 18:56:00</td>
      <td>2017-08-08 21:01:02</td>
      <td>2017-08-08 22:21:22</td>
      <td>2017-08-08 15:21:22</td>
      <td>0 days 02:15:33</td>
    </tr>
    <tr>
      <th>64</th>
      <td>120</td>
      <td>Male</td>
      <td>2017-08-08 07:00:00</td>
      <td>2017-08-08 09:15:41</td>
      <td>2017-08-08 11:53:00</td>
      <td>2017-08-08 14:17:00</td>
      <td>2017-08-08 17:03:00</td>
      <td>2017-08-08 18:56:00</td>
      <td>2017-08-08 21:01:04</td>
      <td>2017-08-08 22:21:22</td>
      <td>2017-08-08 15:21:22</td>
      <td>0 days 02:15:41</td>
    </tr>
    <tr>
      <th>65</th>
      <td>104</td>
      <td>Male</td>
      <td>2017-08-08 07:00:00</td>
      <td>2017-08-08 09:15:30</td>
      <td>2017-08-08 11:53:08</td>
      <td>2017-08-08 14:17:00</td>
      <td>2017-08-08 17:03:00</td>
      <td>2017-08-08 18:56:00</td>
      <td>2017-08-08 21:01:13</td>
      <td>2017-08-08 22:21:22</td>
      <td>2017-08-08 15:21:22</td>
      <td>0 days 02:15:30</td>
    </tr>
    <tr>
      <th>66</th>
      <td>121</td>
      <td>Female</td>
      <td>2017-08-08 07:00:00</td>
      <td>2017-08-08 09:14:56</td>
      <td>2017-08-08 11:41:59</td>
      <td>2017-08-08 14:10:00</td>
      <td>2017-08-08 16:54:00</td>
      <td>2017-08-08 18:41:00</td>
      <td>2017-08-08 21:00:25</td>
      <td>2017-08-08 22:27:51</td>
      <td>2017-08-08 15:27:51</td>
      <td>0 days 02:14:56</td>
    </tr>
    <tr>
      <th>67</th>
      <td>154</td>
      <td>Male</td>
      <td>2017-08-08 07:00:00</td>
      <td>2017-08-08 09:14:43</td>
      <td>2017-08-08 11:42:09</td>
      <td>2017-08-08 14:10:00</td>
      <td>2017-08-08 16:57:00</td>
      <td>2017-08-08 18:41:00</td>
      <td>2017-08-08 21:00:58</td>
      <td>2017-08-08 22:27:51</td>
      <td>2017-08-08 15:27:51</td>
      <td>0 days 02:14:43</td>
    </tr>
  </tbody>
</table>
<p>67 rows × 12 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unformatted_df</span><span class="p">.</span><span class="n">cp3</span> <span class="o">=</span> <span class="n">unformatted_df</span><span class="p">.</span><span class="n">cp3</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>

<span class="n">unformatted_df</span><span class="p">.</span><span class="n">cp3</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">unformatted_df</span><span class="p">.</span><span class="n">cp3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unformatted_df</span><span class="p">.</span><span class="n">cp3</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>position
1    2022-09-11 12:58:00
2    2022-09-11 13:20:00
3    2022-09-11 13:50:00
4    2022-09-11 13:52:00
5    2022-09-11 12:33:00
             ...        
63   2022-09-11 14:17:00
64   2022-09-11 14:17:00
65   2022-09-11 14:17:00
66   2022-09-11 14:10:00
67   2022-09-11 14:10:00
Name: cp3, Length: 67, dtype: datetime64[ns]
</code></pre></div></div>

<h2 id="create-class-for-scraping-and-organising-data">Create class for scraping and organising data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define a class Results for creating Pandas dataframe objects of scrapped data from race results website 
</span>
<span class="k">class</span> <span class="nc">raceResults</span><span class="p">():</span>
    
    <span class="s">"""
    This class returns pandas DataFrame objects which contain data scraped from the race website.
    
    Attributes:
    -----------
    base_url: the url which contains race data in HTML
    year: the year for we would like data
    columns: the column headers for data to be scraped
    check_points: column headers used to calculate time between checkpoints
    """</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base_url</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">columns</span><span class="p">,</span> <span class="n">check_points</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="n">base_url</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">year</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">check_points</span> <span class="o">=</span> <span class="n">check_points</span>
        
    <span class="k">def</span> <span class="nf">basic_table</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">base_url</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">year</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="n">text</span>
        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="s">'lxml'</span><span class="p">)</span>

        <span class="n">lines</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'tr'</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span>
        
        <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
            <span class="n">row</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'td'</span><span class="p">)</span>
            <span class="n">row_list</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">counter</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
                <span class="n">row_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">counter</span><span class="p">].</span><span class="n">string</span><span class="p">)</span>
            <span class="n">data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">row_list</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span><span class="p">).</span><span class="n">set_index</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">df_results</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">df_results</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">basic_table</span><span class="p">()</span>
    
        <span class="n">total</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"total"</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">total</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">total</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="n">df_results</span><span class="p">[</span><span class="s">"total"</span><span class="p">]</span> <span class="o">=</span> <span class="n">total</span>

        <span class="k">def</span> <span class="nf">str2_min</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
            <span class="n">ftr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3600</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">total_seconds</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">ftr</span><span class="p">,</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="n">x</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">':'</span><span class="p">)))])</span>
                <span class="k">return</span> <span class="nb">round</span><span class="p">((</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="mi">60</span><span class="p">),</span><span class="mi">2</span><span class="p">)</span>

        <span class="n">df_results</span><span class="p">[</span><span class="s">'total_min'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">'total'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">str2_min</span><span class="p">)</span>
        <span class="n">df_results</span><span class="p">[</span><span class="s">"average_min"</span><span class="p">]</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">df_results</span><span class="p">[</span><span class="s">"total_min"</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">df_results</span><span class="p">[</span><span class="s">"start"</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2017</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span><span class="mi">0</span><span class="p">)</span>

        <span class="n">cps</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">check_points</span> 

        <span class="k">def</span> <span class="nf">checkpoint2_datetime</span><span class="p">(</span><span class="n">cp</span><span class="p">):</span>
            <span class="n">df_results</span><span class="p">[</span><span class="n">cp</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df_results</span><span class="p">[</span><span class="n">cp</span><span class="p">],</span> <span class="nb">format</span> <span class="o">=</span> <span class="s">"%H:%M:%S"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="s">"coerce"</span><span class="p">)</span>
            <span class="n">df_results</span><span class="p">[</span><span class="n">cp</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="n">cp</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">dt</span><span class="p">:</span> <span class="n">dt</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">year</span> <span class="o">=</span> <span class="mi">2017</span><span class="p">,</span> <span class="n">month</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">12</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">df_results</span><span class="p">[</span><span class="n">cp</span><span class="p">]</span>
    
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">cps</span><span class="p">:</span> 
            <span class="n">df_results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">checkpoint2_datetime</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2cp1"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp1"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"start"</span><span class="p">]</span>
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2cp2"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp2"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp1"</span><span class="p">]</span> 
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2cp3"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp3"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp2"</span><span class="p">]</span> 
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2cp4"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp4"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp3"</span><span class="p">]</span> 
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2cp5"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp5"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp4"</span><span class="p">]</span>
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2cp6"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp6"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp5"</span><span class="p">]</span>
        <span class="n">df_results</span><span class="p">[</span><span class="s">"time2end"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"finish"</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_results</span><span class="p">[</span><span class="s">"cp6"</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="n">df_results</span>
    
    
    <span class="k">def</span> <span class="nf">top_runners</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">df_top</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">df_results</span><span class="p">()[:</span><span class="n">x</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">df_top</span>
    
    <span class="k">def</span> <span class="nf">target_runners</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">runner</span><span class="p">):</span>
        <span class="n">df_runner</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">df_results</span><span class="p">().</span><span class="n">loc</span><span class="p">[</span><span class="n">runner</span><span class="p">]</span>
        <span class="n">df_runner</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df_runner</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">df_runner</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Next define a standalone function for creating averages from the Results() objects
</span>
<span class="k">def</span> <span class="nf">average_pace</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>

    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

    <span class="n">convert_km</span> <span class="o">=</span> <span class="mf">1.60934</span>
    <span class="n">cp</span> <span class="o">=</span> <span class="p">[</span><span class="s">"time2cp1"</span><span class="p">,</span> <span class="s">"time2cp2"</span><span class="p">,</span> <span class="s">"time2cp3"</span><span class="p">,</span> <span class="s">"time2cp4"</span><span class="p">,</span> <span class="s">"time2cp5"</span><span class="p">,</span> <span class="s">"time2cp6"</span><span class="p">,</span> <span class="s">"time2end"</span><span class="p">]</span>
    <span class="n">cp_miles</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mf">58.5</span><span class="p">,</span> <span class="mi">63</span><span class="p">]</span>
    <span class="n">cp_miles_s</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mf">8.5</span><span class="p">,</span><span class="mf">4.5</span><span class="p">]</span>
    <span class="n">cp_distances</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">"cp_miles"</span><span class="p">:</span> <span class="n">cp_miles</span><span class="p">,</span> <span class="s">"cp_miles_s"</span><span class="p">:</span> <span class="n">cp_miles_s</span><span class="p">},</span> <span class="n">index</span> <span class="o">=</span> <span class="n">cp</span><span class="p">)</span>
    <span class="n">cp_distances</span><span class="p">[</span><span class="s">"cp_km"</span><span class="p">]</span> <span class="o">=</span> <span class="n">cp_distances</span><span class="p">[</span><span class="s">"cp_miles"</span><span class="p">]</span> <span class="o">*</span> <span class="n">convert_km</span>
    <span class="n">cp_distances</span><span class="p">[</span><span class="s">"cp_km_s"</span><span class="p">]</span> <span class="o">=</span> <span class="n">cp_distances</span><span class="p">[</span><span class="s">"cp_miles_s"</span><span class="p">]</span> <span class="o">*</span> <span class="n">convert_km</span>

    <span class="n">df_time2cp</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span> <span class="n">cp</span><span class="p">)</span>
    <span class="n">df_averages</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">cp</span><span class="p">:</span> <span class="n">df_averages</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span> <span class="o">=</span> <span class="n">df_time2cp</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)].</span><span class="n">mean</span><span class="p">()</span>

    <span class="n">df_averages</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="n">df_averages</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"2017"</span><span class="p">)</span>
    <span class="n">df_averages</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df_averages</span><span class="p">)</span>
    <span class="n">df_averages</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_averages</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">cp_distances</span><span class="p">))</span>
    <span class="n">df_averages</span><span class="p">[</span><span class="s">"2017_min"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">.</span><span class="n">total_seconds</span><span class="p">()</span><span class="o">/</span><span class="mi">60</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df_averages</span><span class="p">[</span><span class="s">"2017"</span><span class="p">]]</span>
    <span class="n">df_averages</span><span class="p">[</span><span class="s">"min_km"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_averages</span><span class="p">[</span><span class="s">"2017_min"</span><span class="p">]</span><span class="o">/</span><span class="n">df_averages</span><span class="p">[</span><span class="s">"cp_km_s"</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">df_averages</span>
</code></pre></div></div>

<h2 id="define-some-variables-we-will-pass-to-our-class">Define some variables we will pass to our class</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Race website URL:
</span>
<span class="n">base_url</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'http://www.svp100.co.uk/results-'</span>

<span class="c1"># Column headers for the DataFrame scraped directly from the website:
</span>
<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">"pos"</span><span class="p">,</span> <span class="s">"name"</span><span class="p">,</span> <span class="s">"bib"</span><span class="p">,</span> <span class="s">"gender"</span><span class="p">,</span> <span class="s">"start"</span><span class="p">,</span> <span class="s">"club"</span><span class="p">,</span> 
           <span class="s">"cp1"</span><span class="p">,</span> <span class="s">"cp2"</span><span class="p">,</span> <span class="s">"cp3"</span><span class="p">,</span> <span class="s">"cp4"</span><span class="p">,</span> <span class="s">"cp5"</span><span class="p">,</span> <span class="s">"cp6"</span><span class="p">,</span> <span class="s">"finish"</span><span class="p">,</span> <span class="s">"total"</span><span class="p">]</span> 

<span class="c1"># List of new columns we'll add to the DataFrame for our analysis
</span>
<span class="n">check_points</span> <span class="o">=</span> <span class="p">[</span><span class="s">"cp1"</span><span class="p">,</span><span class="s">"cp2"</span><span class="p">,</span><span class="s">"cp3"</span><span class="p">,</span><span class="s">"cp4"</span><span class="p">,</span><span class="s">"cp5"</span><span class="p">,</span><span class="s">"cp6"</span><span class="p">,</span><span class="s">"finish"</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="initialize-a-results-object-with-results-from-2017-race">Initialize a Results() object with results from 2017 race¶</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">results</span> <span class="o">=</span> <span class="n">raceResults</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="mi">2017</span><span class="p">,</span> <span class="n">columns</span><span class="p">,</span> <span class="n">check_points</span><span class="p">)</span>
<span class="n">all_runners</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">df_results</span><span class="p">()</span>
<span class="n">all_runners</span> <span class="o">=</span> <span class="n">average_pace</span><span class="p">(</span><span class="n">all_runners</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">top_3</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">top_runners</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">top_3</span> <span class="o">=</span> <span class="n">average_pace</span><span class="p">(</span><span class="n">top_3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">me</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">target_runners</span><span class="p">(</span><span class="s">"Stephen Lemasney"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plots</span> <span class="o">=</span> <span class="n">all_runners</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">top_3</span><span class="p">,</span> <span class="n">lsuffix</span> <span class="o">=</span> <span class="s">"_all"</span><span class="p">,</span> <span class="n">rsuffix</span>  <span class="o">=</span> <span class="s">"_t3"</span><span class="p">)</span>
<span class="n">plots</span> <span class="o">=</span> <span class="n">plots</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">me</span><span class="p">,</span> <span class="n">rsuffix</span><span class="o">=</span><span class="s">"_me"</span> <span class="p">)</span>
<span class="n">plots</span><span class="p">[</span><span class="s">"2017_me"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">.</span><span class="n">total_seconds</span><span class="p">()</span><span class="o">/</span><span class="mi">60</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">plots</span><span class="p">[</span><span class="s">"Stephen Lemasney"</span><span class="p">]]</span>
<span class="n">plots</span><span class="p">[</span><span class="s">"min_km_me"</span><span class="p">]</span> <span class="o">=</span> <span class="n">plots</span><span class="p">[</span><span class="s">"2017_me"</span><span class="p">]</span><span class="o">/</span><span class="n">plots</span><span class="p">[</span><span class="s">"cp_km_s_all"</span><span class="p">]</span>
<span class="n">plots</span> <span class="o">=</span> <span class="n">plots</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">"min_km_all"</span><span class="p">:</span><span class="s">"All Runners"</span><span class="p">,</span><span class="s">"min_km_t3"</span><span class="p">:</span><span class="s">"Top 10"</span><span class="p">,</span><span class="s">"min_km_me"</span><span class="p">:</span><span class="s">"Me"</span><span class="p">})</span>
</code></pre></div></div>

<h2 id="plot-the-results-using-fivethirtyeight-styling">Plot the results using “FiveThirtyEight” styling</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plots</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s">"All Runners"</span><span class="p">,</span><span class="s">"Top 10"</span><span class="p">,</span><span class="s">"Me"</span><span class="p">],</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"cp_km_all"</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Average pace of runners (minutes per km)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Minutes per km'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="s">"small"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Kilometers'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="images/2018-03-02-svp_29_0.png" alt="png" /></p>]]></content><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[SVP100 - Hitting The Wall]]></summary></entry><entry><title type="html">Find all Tuesdays</title><link href="https://fastpages.fast.ai/tutorials/2018/03/01/count-tuesdays.html" rel="alternate" type="text/html" title="Find all Tuesdays" /><published>2018-03-01T00:00:00-06:00</published><updated>2018-03-01T00:00:00-06:00</updated><id>https://fastpages.fast.ai/tutorials/2018/03/01/count-tuesdays</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/2018/03/01/count-tuesdays.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2018-03-01-count-tuesdays.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this tutorial we look at two ways to solve the following problem:</p>
<blockquote><p>Count the number of Tuesday between 1st of January 2000 and 31st of December 2020</p>
</blockquote>
<p>First, we find the answer using the very helpful <a href="https://docs.python.org/3/library/datetime.html">Datetime</a> package. This package does most of the heavy lifting for us. Then, for a bit of fun, we try and find the same solution using Python's default data types only.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="1.-With-the-datetime-package">1. With the datetime package<a class="anchor-link" href="#1.-With-the-datetime-package"> </a></h2><p>Start by importing the datetime and timedelta class.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Then write a function which takes two paraters, <code>start_year</code> and <code>end_year</code>, which returns the number of Tuesdays between these years. There is an assumption that <code>start_year</code> starts on 1st day of the year, and <code>end_year</code> ends on the last day of that year.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">count_tuesdays</span><span class="p">(</span><span class="n">start_year</span><span class="p">,</span> <span class="n">end_year</span><span class="p">):</span>
    
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Returns the number of Tuesaday between two dates.</span>
<span class="sd">    </span>
<span class="sd">    Parameters:</span>
<span class="sd">        start_year (int): The starting year</span>
<span class="sd">        end_year (int): The end year</span>
<span class="sd">        </span>
<span class="sd">    Returns:</span>
<span class="sd">        count_tuesdays(int): The number of Tuesdays between start_year and end_year</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    
    <span class="c1"># 1. Find the number of days between start and end year</span>
    <span class="n">datetime_range</span> <span class="o">=</span>  <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="n">end_year</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="n">start_year</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">31</span><span class="p">)</span>
    
    <span class="c1"># 2. Build a list of Datetimes for this range</span>
    <span class="n">date_range</span> <span class="o">=</span> <span class="p">[</span><span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="n">start_year</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">datetime_range</span><span class="o">.</span><span class="n">days</span><span class="p">)]</span>
        
    <span class="c1"># 3. Count the number of Tuesdays in this range    </span>
    <span class="n">count_tuesdays</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">date_range</span> <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">isoweekday</span><span class="p">()</span> <span class="o">==</span> <span class="mi">2</span><span class="p">])</span>
        
    <span class="k">return</span> <span class="n">count_tuesdays</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">count_tuesdays</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">2021</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>1044</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="2.-Using-default-Python-data-structures">2. Using default Python data structures<a class="anchor-link" href="#2.-Using-default-Python-data-structures"> </a></h2><p>Next, lets make it a little harder to solve. Lets find the same result, this time only using Python's default data structures. In order words, we cannot rely on the <code>datetime</code> package.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>First, we create a simple <code>Date</code> object which has the following attributes:</p>
<ol>
<li>year</li>
<li>month</li>
<li>day</li>
<li>is_leap</li>
<li>day_of_week</li>
<li>day_of_weel_decode</li>
</ol>
<p>There is nothing too complicated here. We assign some validation on the attributes. For example, the days cannot be greater than 31 and months cannot be greater than 12.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">class</span> <span class="nc">Date</span><span class="p">():</span>
    
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">,</span> <span class="n">day_of_week</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">year</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">is_leap</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_leap</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">year</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">month</span> <span class="o">=</span> <span class="n">month</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">day</span> <span class="o">=</span> <span class="n">day</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">day_of_week</span> <span class="o">=</span> <span class="n">day_of_week</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">day_of_week_decode</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_day_of_week_decode</span><span class="p">()</span>
        
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">day</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_day</span>
    
    <span class="nd">@day</span><span class="o">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">day</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">31</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s2">&quot;Days cannot be greater than 31&quot;</span><span class="p">)</span> 
        <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">month</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span> <span class="ow">and</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="mi">31</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Days cannot be greater than 30 for month </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">month</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> 
        <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">month</span> <span class="o">==</span> <span class="mi">2</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">is_leap</span> <span class="o">==</span> <span class="kc">True</span> <span class="ow">and</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="mi">29</span><span class="p">):</span>
                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Days must be 29 or less for a leap year Febuary&quot;</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">is_leap</span> <span class="o">==</span> <span class="kc">False</span> <span class="ow">and</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="mi">28</span><span class="p">):</span>
                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Days must be 28 or less for a non-leap year Febuary&quot;</span><span class="p">)</span>        
        <span class="bp">self</span><span class="o">.</span><span class="n">_day</span> <span class="o">=</span> <span class="n">value</span>
        
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">month</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_month</span>
    
    <span class="nd">@month</span><span class="o">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">month</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">12</span><span class="p">):</span> <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s2">&quot;Month cannot be greater than 12&quot;</span><span class="p">)</span> 
        <span class="bp">self</span><span class="o">.</span><span class="n">_month</span> <span class="o">=</span> <span class="n">value</span>
    
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">year</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_year</span>

    <span class="nd">@year</span><span class="o">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">year</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_year</span> <span class="o">=</span> <span class="n">value</span>
        
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">day_of_week</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_day_of_week</span>

    <span class="nd">@day_of_week</span><span class="o">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">day_of_week</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_day_of_week</span> <span class="o">=</span> <span class="n">value</span>
        
    <span class="k">def</span> <span class="nf">_is_leap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>

        <span class="k">return</span> <span class="kc">False</span>
        
    <span class="k">def</span> <span class="nf">_day_of_week_decode</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        
        <span class="n">decodes</span> <span class="o">=</span> <span class="p">{</span>
            
            <span class="mi">1</span><span class="p">:</span> <span class="s2">&quot;Mon&quot;</span><span class="p">,</span>
            <span class="mi">2</span><span class="p">:</span> <span class="s2">&quot;Tue&quot;</span><span class="p">,</span>
            <span class="mi">3</span><span class="p">:</span> <span class="s2">&quot;Wed&quot;</span><span class="p">,</span>
            <span class="mi">4</span><span class="p">:</span> <span class="s2">&quot;Thu&quot;</span><span class="p">,</span>
            <span class="mi">5</span><span class="p">:</span> <span class="s2">&quot;Fri&quot;</span><span class="p">,</span>
            <span class="mi">6</span><span class="p">:</span> <span class="s2">&quot;Sat&quot;</span><span class="p">,</span>
            <span class="mi">7</span><span class="p">:</span> <span class="s2">&quot;Sun&quot;</span>
            
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">decodes</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">day_of_week</span><span class="p">]</span>
        
    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">year</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">month</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">day</span><span class="si">}</span><span class="s2">&quot;</span>
    
    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Date(</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">year</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">month</span><span class="si">}</span><span class="s2">-</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">day</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">day_of_week_decode</span><span class="si">}</span><span class="s2">)&quot;</span>
    
        
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's build a sample date object to check everything looks ok. We'll create a <code>Date</code> for Tuesday 29th of Febuary 2000.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">Date</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>Date(2000-2-29, Tue)</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">try</span><span class="p">:</span>
    <span class="n">sample_date</span> <span class="o">=</span>  <span class="n">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Days must be 28 or less for a non-leap year Febuary
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Next, let's build up a range of dates. First we need a generator which will return a weekday label (1 to 7) for each date in our range. We know that the 1st of January is a saturday so we will build our iterable from that point.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">class</span> <span class="nc">DateRange</span><span class="p">():</span>
    
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start_year</span><span class="p">,</span> <span class="n">end_year</span><span class="p">,</span> <span class="n">start_day_of_week</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">start_year</span> <span class="o">=</span> <span class="n">start_year</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">end_year</span> <span class="o">=</span> <span class="n">end_year</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">start_day_of_week</span> <span class="o">=</span> <span class="n">start_day_of_week</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">range</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">build_range</span><span class="p">(</span><span class="n">start_year</span><span class="p">,</span> <span class="n">end_year</span><span class="p">,</span> <span class="n">start_day_of_week</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">_days_of_week</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">starting_day</span><span class="p">):</span>

        <span class="n">days_of_week</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>

        <span class="n">days_of_week</span> <span class="o">=</span> <span class="n">days_of_week</span><span class="p">[(</span><span class="n">starting_day</span><span class="o">-</span><span class="mi">1</span><span class="p">):]</span> <span class="o">+</span> <span class="n">days_of_week</span><span class="p">[:(</span><span class="n">starting_day</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>

        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>

            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">days_of_week</span><span class="p">:</span>

                <span class="k">yield</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
                
    <span class="k">def</span> <span class="nf">_is_leap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>

        <span class="k">return</span> <span class="kc">False</span>

    <span class="k">def</span> <span class="nf">build_range</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start_year</span><span class="p">,</span> <span class="n">end_year</span><span class="p">,</span> <span class="n">start_day_of_week</span><span class="p">):</span>
                
        <span class="n">day_of_week_iterator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_days_of_week</span><span class="p">(</span><span class="n">start_day_of_week</span><span class="p">)</span>
        
        <span class="n">date_range</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start_year</span><span class="p">,</span> <span class="n">end_year</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>

            <span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">13</span><span class="p">):</span>

                <span class="k">if</span> <span class="n">month</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">]:</span>
                    <span class="n">day_count</span> <span class="o">=</span> <span class="mi">30</span>

                <span class="k">elif</span> <span class="p">(</span><span class="n">month</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_leap</span><span class="p">(</span><span class="n">year</span><span class="p">)):</span>
                    <span class="n">day_count</span> <span class="o">=</span> <span class="mi">29</span>

                <span class="k">elif</span> <span class="p">(</span><span class="n">month</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_leap</span><span class="p">(</span><span class="n">year</span><span class="p">)</span> <span class="ow">is</span> <span class="kc">False</span><span class="p">):</span>
                    <span class="n">day_count</span> <span class="o">=</span> <span class="mi">28</span>

                <span class="k">else</span><span class="p">:</span>
                    <span class="n">day_count</span> <span class="o">=</span> <span class="mi">31</span>

                <span class="n">days_in_month</span> <span class="o">=</span> <span class="p">[</span><span class="n">Date</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="nb">next</span><span class="p">(</span><span class="n">day_of_week_iterator</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">day_count</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

                <span class="n">date_range</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">days_in_month</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">date_range</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">date_range</span> <span class="o">=</span> <span class="n">DateRange</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">2019</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">range</span>
<span class="n">count_tuesdays</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">date_range</span> <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">day_of_week</span> <span class="o">==</span> <span class="mi">2</span><span class="p">])</span>
<span class="n">count_tuesdays</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>1044</pre>
</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name>Stephen Lemasney</name></author><summary type="html"><![CDATA[TBC]]></summary></entry><entry><title type="html">Copying objects in Python</title><link href="https://fastpages.fast.ai/tutorials/2018/01/02/copying-objects.html" rel="alternate" type="text/html" title="Copying objects in Python" /><published>2018-01-02T00:00:00-06:00</published><updated>2018-01-02T00:00:00-06:00</updated><id>https://fastpages.fast.ai/tutorials/2018/01/02/copying-objects</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/2018/01/02/copying-objects.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2018-01-02-copying-objects.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this tutorial we compare a shallow versus deep copy in Python using the inbuilt <code>copy</code> module.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">copy</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="1.-Assignment">1. Assignment<a class="anchor-link" href="#1.-Assignment"> </a></h2><p>First we create a list called foo_list which has three items: two ints and one list of ints. We run the in-built <code>id</code> function to check the address of the list object in memory.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>

<span class="c1"># check the item&#39;s address in memory</span>
<span class="nb">id</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>2930710693248</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Next we create a second variable called foo_list_two which is assigned to foo_list. We can see that both variables point to the same object in memory.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list_two</span> <span class="o">=</span> <span class="n">foo_list</span>

<span class="c1"># Check the two variables point to the same object</span>
<span class="nb">id</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span> <span class="o">==</span> <span class="nb">id</span><span class="p">(</span><span class="n">foo_list_two</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>True</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>

<span class="c1"># Check the second list</span>
<span class="n">foo_list_two</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[11, 2, [3, 4]]</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">reset</span> -f
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="3.-Shallow-copy">3. Shallow copy<a class="anchor-link" href="#3.-Shallow-copy"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>

<span class="c1"># check the item&#39;s address in memory</span>
<span class="nb">id</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>2930709728704</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list_two</span> <span class="o">=</span> <span class="n">foo_list</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>

<span class="c1"># Check the two variables point to the same object</span>
<span class="nb">id</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span> <span class="o">==</span> <span class="nb">id</span><span class="p">(</span><span class="n">foo_list_two</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>False</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>

<span class="c1"># Check the second list</span>
<span class="n">foo_list_two</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[1, 2, [11, 4]]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="3.-Deep-copy">3. Deep copy<a class="anchor-link" href="#3.-Deep-copy"> </a></h2><p>A deep copy creates a new object and recursively adds the copies of nested objects present in the original elements.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">deepcopy</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>

<span class="c1"># check the item&#39;s address in memory</span>
<span class="nb">id</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>2930709811328</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list_two</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span>

<span class="c1"># Check the two variables point to different objects</span>
<span class="nb">id</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span> <span class="o">==</span> <span class="nb">id</span><span class="p">(</span><span class="n">foo_list_two</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>False</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>

<span class="c1"># Check that the deep copied list does not update</span>
<span class="nb">print</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">foo_list_two</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[11, 2, [11, 4]]
[1, 2, [3, 4]]
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">foo_list</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">22</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">foo_list</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">foo_list_two</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[11, 2, [22, 4]]
[1, 2, [3, 4]]
</pre>
</div>
</div>

</div>
</div>

</div>
    

</div>]]></content><author><name>Stephen Lemasney</name></author><summary type="html"><![CDATA[A quick overview of deep versus shallow copy]]></summary></entry><entry><title type="html">An Example Markdown Post</title><link href="https://fastpages.fast.ai/tutorials/markdown/2018/01/01/test-markdown-post.html" rel="alternate" type="text/html" title="An Example Markdown Post" /><published>2018-01-01T00:00:00-06:00</published><updated>2018-01-01T00:00:00-06:00</updated><id>https://fastpages.fast.ai/tutorials/markdown/2018/01/01/test-markdown-post</id><content type="html" xml:base="https://fastpages.fast.ai/tutorials/markdown/2018/01/01/test-markdown-post.html"><![CDATA[<h1 id="example-markdown-post">Example Markdown Post</h1>

<h2 id="basic-setup">Basic setup</h2>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-filename.md</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">filename</code> is whatever file name you choose, to remind yourself what this post is about. <code class="language-plaintext highlighter-rouge">.md</code> is the file extension for markdown files.</p>

<p>The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “<em>level 1 heading</em>” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line <code class="language-plaintext highlighter-rouge">## File names</code> above.</p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>You can use <em>italics</em>, <strong>bold</strong>, <code class="language-plaintext highlighter-rouge">code font text</code>, and create <a href="https://www.markdownguide.org/cheat-sheet/">links</a>. Here’s a footnote <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Here’s a horizontal rule:</p>

<hr />

<h2 id="lists">Lists</h2>

<p>Here’s a list:</p>

<ul>
  <li>item 1</li>
  <li>item 2</li>
</ul>

<p>And a numbered list:</p>

<ol>
  <li>item 1</li>
  <li>item 2</li>
</ol>

<h2 id="boxes-and-stuff">Boxes and stuff</h2>

<blockquote>
  <p>This is a quotation</p>
</blockquote>

<div class="Toast Toast--warning googoo">
   <span class="Toast-icon"><svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z"></path></svg></span>
   <span class="Toast-content">You can include alert boxes</span>
</div>

<p>…and…</p>

<div class="Toast">
   <span class="Toast-icon"><svg class="octicon octicon-info" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z"></path></svg></span>
   <span class="Toast-content">You can include info boxes</span>
</div>

<h2 id="images">Images</h2>

<p><img src="tutorials/images/logo.png" alt="" title="fast.ai's logo" /></p>

<h2 id="code">Code</h2>

<p>You can format text and code per usual</p>

<p>General preformatted text:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Do a thing
do_thing()
</code></pre></div></div>

<p>Python code and output:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Prints '2'
</span><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div></div>

<p>Formatting text as shell commands:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"hello world"</span>
./some_script.sh <span class="nt">--option</span> <span class="s2">"value"</span>
wget https://example.com/cat_photo1.png
</code></pre></div></div>

<p>Formatting text as YAML:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">key</span><span class="pi">:</span> <span class="s">value</span>
<span class="pi">-</span> <span class="na">another_key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">another</span><span class="nv"> </span><span class="s">value"</span>
</code></pre></div></div>

<h2 id="tables">Tables</h2>

<table>
  <thead>
    <tr>
      <th>Column 1</th>
      <th>Column 2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A thing</td>
      <td>Another thing</td>
    </tr>
  </tbody>
</table>

<h2 id="tweetcards">Tweetcards</h2>

<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Altair 4.0 is released! <a href="https://t.co/PCyrIOTcvv">https://t.co/PCyrIOTcvv</a><br />Try it with:<br /><br />  pip install -U altair<br /><br />The full list of changes is at <a href="https://t.co/roXmzcsT58">https://t.co/roXmzcsT58</a> ...read on for some highlights. <a href="https://t.co/vWJ0ZveKbZ">pic.twitter.com/vWJ0ZveKbZ</a></p>&mdash; Jake VanderPlas (@jakevdp) <a href="https://twitter.com/jakevdp/status/1204765621767901185?ref_src=twsrc%5Etfw">December 11, 2019</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>This is the footnote. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[An Example Markdown Post]]></summary></entry></feed>